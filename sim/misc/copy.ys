# Ryan Guo

init:
	.pos 0
	irmovq Stack, %rsp
    irmovq src, %rdi
    irmovq dest, %rsi
	irmovq $3, %rdx
	call copy_block
	halt

.align 8

# Source block
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00

# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333

copy_block:
	irmovq $1, %rbx
	irmovq $8, %r12
	xorq %rax, %rax
	andq %rdx, %rdx
    jle Done

Loop:
    mrmovq (%rdi), %r9    # long val = *src
	rmmovq %r9, 0(%rsi)   # *dest = val
    addq %r12, %rdi       # src++
    addq %r12, %rsi       # dest++
    xorq %r9, %rax       # result ^= val
	subq %rbx, %rdx
	andq %rdx, %rdx
	jne Loop

Done:
	ret

.pos 0x100
Stack:
